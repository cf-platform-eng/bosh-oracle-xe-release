#!/bin/bash
set +e

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end
  my_ip = discover_external_ip
%>

RUN_DIR=/var/vcap/sys/run/oracle_xe_sb
LOG_DIR=/var/vcap/sys/log/oracle_xe_sb
PIDFILE=${RUN_DIR}/pid

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

export OPENJDK_INSTALL_HOME=/var/vcap/packages/openjdk/
export ORACLE_SB_INSTALL_HOME=/var/vcap/packages/oracle-service-broker/
export JAVA_RUN_ARG=<%=properties.oracle_xe_sb.run_arg %>

export OPENJDK=openjdk
export ORACLE_SB_APP_DIR="oracle-service-broker"

export SB_APP_ENV="setupServiceBrokerEnv.sh"
export SB_APP_CONFIG="config/application.properties"

# Not relying on network name to arrive at hostip
# Set the ip to HOSTNAME to avoid listener getting bound to some internal only hostname
export HOSTNAME=<%="#{my_ip}"%>
export SB_HOST_IP=<%="#{my_ip}"%>

export OJDBC_DRIVER_DOWNLOAD_URL=<%=properties.oracle_xe_sb.jdbc_driver_download_url %>

export LISTEN_PORT=<%=properties.oracle_xe_sb.listen_port %>
export MIN_HEAP=<%=properties.oracle_xe_sb.memory.min_heap %>
export MAX_HEAP=<%=properties.oracle_xe_sb.memory.max_heap %>

export XE_ADMIN_USER=<%=properties.oracle_xe_sb.credentials.system.username%>
export XE_ADMIN_PASSWD=<%=properties.oracle_xe_sb.credentials.system.passwd %>
export XE_SB_USER=<%=properties.oracle_xe_sb.credentials.sbuser.username%>
export XE_SB_PASSWD=<%=properties.oracle_xe_sb.credentials.sbuser.passwd %>

# Dont use multiple ips - for now go with host ip where the broker is running
#export XE_HOST_ADDR=<%=properties.oracle_xe_sb.service.service_addr %>
export XE_HOST_ADDR=$SB_HOST_IP
export XE_HOST_PORT=<%=properties.oracle_xe_sb.service.service_port %>
export XE_SERVICE_SID=<%=properties.oracle_xe_sb.service.service_sid %>


export DEBUG_LOG=$LOG_DIR/oracle_xe_sb.log

touch $DEBUG_LOG
chmod -R 755 /var/vcap/sys
chmod 777 $DEBUG_LOG

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

log_debug "Kicking off ctl script as `whoami` with $1"

case $1 in

  start)
    # Kill the previously running instance if any
    kill -9 `cat $PIDFILE`

    pushd $ORACLE_SB_INSTALL_HOME
    cp templates/service_plan.json .
    # DB Profile would be created with the associated XE Instance IP but
    # would choke on  the '.' between ips - change those into '_'
    # Sample Profile name: oracle_broker_10_244_3_6 (spring app code adds oracle_broker_)
    #
    export PLAN_ID=${XE_HOST_ADDR}
    PLAN_ID=`echo $PLAN_ID | sed -e 's/\./_/g' `

    sed -i.bak "s/PLAN_ID/${PLAN_ID}/g;         \
            s/XE_HOST_ADDR/${XE_HOST_ADDR}/g;                     \
            s/MAX_SPACE_SIZE/${MAX_SPACE_SIZE}/g;                 \
            s/MAX_CONCURRENT_CONN/${MAX_CONCURRENT_CONN}/g"       \
            service_plan.json

    log_debug "Copied over default service plan file template and updated it"
    popd

    pushd ${OPENJDK_INSTALL_HOME}/${OPENJDK}
    if [[ -d bin && `bin/java -Xmx64M -version 2>&1` =~ "OpenJDK 64-Bit Server" && $? == 0 ]]; then
    JAVA_HOME=${OPENJDK_INSTALL_HOME}/${OPENJDK}
      JAVA_BINARY=${JAVA_HOME}/bin/java
      cd ..
    else
      echo "JVM is not properly packaged"
      exit 1
    fi
    log_debug "Located Java Binary at: ${JAVA_BINARY}"

    pushd $ORACLE_SB_INSTALL_HOME
    if [ -d $ORACLE_SB_APP_DIR ]; then
      ORACLE_SB_APP=`ls ${ORACLE_SB_APP_DIR}/*.jar`
      ORACLE_SB_APP_PATH=${ORACLE_SB_INSTALL_HOME}/${ORACLE_SB_APP}
      ORACLE_SB_EXPLODED_APP_PATH=${ORACLE_SB_INSTALL_HOME}/exploded
      mkdir -p $ORACLE_SB_EXPLODED_APP_PATH
    else
      echo "Oracle Service Broker App Jar is not properly packaged"
      exit 1
    fi
    log_debug "Located App at: ${ORACLE_SB_APP_PATH}"

    pushd $ORACLE_SB_EXPLODED_APP_PATH
    # openjdk or some weird jar problem appears to corrupt the nested jar files when used to update the oracle jdbc driver
    #    java.lang.IllegalStateException: Unable to open nested compressed entry lib/jboss-logging-3.1.3.GA.jar
    #     at org.springframework.boot.loader.jar.JarFile.createJarFileFromFileEntry(JarFile.java:378)
    #     at org.springframework.boot.loader.jar.JarFile.createJarFileFromEntry(JarFile.java:355)
    #     at org.springframework.boot.loader.jar.JarFile.getNestedJarFile(JarFile.java:341)
    #     at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchive(JarFileArchive.java:108)
    #     at org.springframework.boot.loader.archive.JarFileArchive.getNestedArchives(JarFileArchive.java:92)
    #     at org.springframework.boot.loader.ExecutableArchiveLauncher.getClassPathArchives(ExecutableArchiveLauncher.java:68)
    #     at org.springframework.boot.loader.Launcher.launch(Launcher.java:60)
    #     at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:45)
    # Unzip the app contents and use the exploded path in classpath to start the java type service broker
    unzip ${ORACLE_SB_APP_PATH}
    log_debug "Extracted App contents under $ORACLE_SB_EXPLODED_APP_PATH"

    cp -r $ORACLE_SB_INSTALL_HOME/templates/config .
    sed -i.bak "s/XE_ADMIN_USER/${XE_ADMIN_USER}/g;           \
            s/XE_ADMIN_PASSWD/${XE_ADMIN_PASSWD}/g;           \
            s/XE_SB_USER/${XE_SB_USER}/g;                     \
            s/XE_SB_PASSWD/${XE_SB_PASSWD}/g;                 \
            s/XE_HOST_ADDR/${XE_HOST_ADDR}/g;                 \
            s/XE_HOST_PORT/${XE_HOST_PORT}/g;                 \
            s/XE_SERVICE_SID/${XE_SERVICE_SID}/g"             \
            ${SB_APP_CONFIG}

    curl -k ${OJDBC_DRIVER_DOWNLOAD_URL} -o lib/ojdbc.jar
    if [ "$?" == "0" ]; then
      log_debug "Successfully downloaded Oracle JDBC Driver"
    else
      log_debug "Unable to download Oracle JDBC Driver from url: ${OJDBC_DRIVER_DOWNLOAD_URL}"
    fi

    log_debug "Added Oracle jdbc driver to App bits"
    log_debug "Updated App with correct db connectivity information changes"
    popd

    mkdir -p /var/vcap/data/tmp
    cp -r templates/${SB_APP_ENV} /var/vcap/data/tmp
    pushd /var/vcap/data/tmp
    sed -i.bak "s/XE_ADMIN_USER/${XE_ADMIN_USER}/g;           \
            s/XE_ADMIN_PASSWD/${XE_ADMIN_PASSWD}/g;           \
            s/XE_SB_USER/${XE_SB_USER}/g;                     \
            s/XE_SB_PASSWD/${XE_SB_PASSWD}/g;                 \
            s/XE_HOST_ADDR/${XE_HOST_ADDR}/g;                 \
            s/XE_HOST_PORT/${XE_HOST_PORT}/g;                 \
            s/XE_SERVICE_SID/${XE_SERVICE_SID}/g"             \
            /var/vcap/data/tmp/${SB_APP_ENV}

    cp /var/vcap/data/tmp/${SB_APP_ENV} $ORACLE_SB_INSTALL_HOME
    popd


    log_debug "Starting off the Oracle XE Service Broker App on ${SB_HOST_IP}:${LISTEN_PORT}"
    source $ORACLE_SB_INSTALL_HOME/${SB_APP_ENV}
    nohup $JAVA_BINARY  -verbose:gc -Xms${MIN_HEAP}m -Xmx${MAX_HEAP}m -Dserver.port=${LISTEN_PORT} -classpath ${ORACLE_SB_EXPLODED_APP_PATH}:${ORACLE_SB_EXPLODED_APP_PATH}/lib $JAVA_RUN_ARG 2>&1 >> $DEBUG_LOG &
    APP_PID=`ps -ef | grep "java" | grep -v "grep" | awk ' { print $2 }' `
    log_debug "Kicked off the Oracle XE Service Broker App with Pid: $APP_PID"
    echo $APP_PID > $PIDFILE

    # Sleep for a little while so the server comes up
    sleep 20

    app_endpoint=http://${SB_HOST_IP}:${LISTEN_PORT}
    app_catalog_url=${app_endpoint}/v2/catalog
    catalog_output=`curl -X GET ${app_catalog_url} 2>/dev/null`
    log_debug "Oracle Service Broker App Catalog output : $catalog_output"

    #service_id=`echo $catalog_output | sed -e 's/"//g;s/name.*//;s/.*id://g;s/,//' `
    service_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep services | sed -e "s/^.*id://g;s/,//" `
    plan_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep plans | sed -e "s/^.*id://g;s/,//" `
    log_debug "Catalog Service Id : $service_id "



    <% if properties.oracle_xe_sb.on_demand_service_plans %>
      <%  p("oracle_xe_sb.on_demand_service_plans").each do |plan|
             plan_name=plan['service_plan_name']
             init_size=plan['init_space_size']
             max_size=plan['max_space_size']
             max_con_conn=plan['max_concurrent_conn']
       %>
        export PLAN_ID=<%="#{plan_name}"%>
        export INIT_SPACE_SIZE=<%="#{init_size}"%>
        export MAX_SPACE_SIZE=<%="#{max_size}"%>
        export MAX_CONCURRENT_CONN=<%="#{max_con_conn}"%>

        pushd $ORACLE_SB_INSTALL_HOME
        cp templates/service_plan.json .
        # DB Profile would be created with the associated XE Instance IP but
        # would choke on  the '.' between ips - change those into '_'
        # Sample Profile name: oracle_broker_10_244_3_6 (spring app code adds oracle_broker_)
        #

        sed -i.bak "s/PLAN_ID/${PLAN_ID}/g;                      \
            s/XE_HOST_ADDR/${XE_HOST_ADDR}/g;                    \
            s/INIT_SPACE_SIZE/${INIT_SPACE_SIZE}/g;              \
            s/MAX_SPACE_SIZE/${MAX_SPACE_SIZE}/g;                \
            s/MAX_CONCURRENT_CONN/${MAX_CONCURRENT_CONN}/g"      \
            service_plan.json

         log_debug "Copied over default service plan file template with ${PLAN_ID} and updated it"
         new_plan=`cat service_plan.json`
         log_debug "Contents of the plan: ${new_plan} "
         popd
         plan_creation_output=`curl ${app_catalog_url}/services/${service_id}/plans -X POST -H "Content-Type:application/json" -d @${ORACLE_SB_INSTALL_HOME}/service_plan.json`
         log_debug "Service Plan created!!"
         log_debug "Service Plan details: ${plan_creation_output}"
       <% end %>
    <% end %>



    ;;

  stop)

    log_debug "Stopping the oracle-service-broker service "
    kill -9 `cat $PIDFILE`
    rm -f $PIDFILE
    ;;

  *)
    echo "Usage: ctl {start|stop}" ;;

esac
